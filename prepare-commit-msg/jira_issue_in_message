#!/bin/sh
#
# Automatically add branch name and branch description to every commit message except merge commit.
#

COMMIT_EDITMSG=$1
COMMIT_TYPE=$2

BRANCH_PATTERN="\(^[A-Z]\{1,10\}-[0-9]\{2,\}\)\(.*\)"

BRANCH_NAME=$(git symbolic-ref --quiet --short HEAD)

extra=""

function addBranchName() {
    type=$(uppercase $BRANCH_NAME | cut -d '/' -f 1)
    branch_name=$(echo $BRANCH_NAME | cut -d '/' -f 2)
    id=$(echo $branch_name | sed -e "s/$BRANCH_PATTERN/\1/")
    desc=$(uppercase $(echo $branch_name | sed -e "s/$BRANCH_PATTERN/\2/" | sed -e 's/[-_]/ /g' | sed -e 's/^[[:space:]]*//'))

    commit_head=$(head -n 1 $COMMIT_EDITMSG)
    commit_rest=$(tail -n +3 $COMMIT_EDITMSG)

    add="no"
    if shouldFormatMessage $id ; then
        add="yes"
        echo "$id $commit_head\n\n- $id $desc ($type)\n$commit_rest" > $COMMIT_EDITMSG
    fi
    echo "# Extra info:
# - adding [$add]
# - id     [$id]
# - descr  [$descr]
# - type   [$COMMIT_TYPE]
# - branch [$BRANCH_NAME]
# - extra  [$extra]" >> $COMMIT_EDITMSG
}

function shouldFormatMessage() {
    id=$1

    if [ -z $BRANCH_NAME ] ; then
        extra="no branch"
        return 1
    fi
    CONTAINS_ID=$(cat $COMMIT_EDITMSG | grep "$id" | wc -l)
    extra="id count $CONTAINS_ID ($id)"
    if [ $CONTAINS_ID -gt 1 ] ; then
        return 1 
    fi
    MERGE=$(cat $COMMIT_EDITMSG | grep -i 'merge' | wc -l)
    if [ $MERGE -ne 0 ] ; then
        extra="merge $MERGE"
        return 1
    fi
    return 0
}

function uppercase() {
    args=$*
    echo $(echo ${args:0:1} | tr  '[a-z]' '[A-Z]')${args:1}
}

case "${1}" in
    --about )
        echo "Creates commit message based on branch name (for JIRA issues)."
        ;;
    * )

        addBranchName
        ;;
esac
